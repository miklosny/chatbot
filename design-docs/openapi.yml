openapi: 3.1.0
info:
  title: Docs AI Chat API
  version: 1.0.0
  license:
    name: TBD
    url: TBD
servers:
  - url: http://knowledge.mongodb.com/api/v1
security:
  - ApiKeyAuth: []
paths:
  /conversations:
    post:
      operationId: createConversation
      summary: Start a new conversation
      description: |
        **NOTE:** Captures user IP address.
      parameters:
        - in: header
          name: Origin
          required: true
          schema:
            $ref: '#/components/schemas/OriginHeaderValue'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"

  /conversations/{conversationId}/messages:
    post:
      operationId: addMessage
      summary: Send a message to the conversation
      parameters:
        - $ref: "#/components/parameters/conversationId"
        - name: stream
          in: query
          required: false
          schema:
            type: boolean
          description: |
            If `true`, the response will be streamed to the client. This is useful for long-running conversations.
        - in: header
          name: Origin
          required: true
          schema:
            $ref: '#/components/schemas/OriginHeaderValue'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                  format: markdown
                  description: |
                    Markdown-formatted message from the user.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /conversations/{conversationId}/messages/{messageId}/rating:
    post:
      operationId: rateMessage
      summary: Rate a message
      parameters:
        - $ref: "#/components/parameters/conversationId"
        - $ref: "#/components/parameters/messageId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageRating"
      responses:
        204:
          description: Rating Saved
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  schemas:
    Conversation:
      type: object
      required:
        - _id
        - messages
        - createdAt
      properties:
        _id:
          type: string
          description: The unique identifier for a conversation.
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        createdAt:
          type: integer
          description: Unix timestamp for when the conversation was created.
    Message:
      type: object
      required:
        - id
        - role
        - content
        - createdAt
      properties:
        id:
          type: string
          description: The unique identifier for a message.
        role:
          type: string
          enum: [user, assistant, system]
        content:
          type: string
          format: markdown
          description: |
            Markdown-formatted response to user's chat message in the context
            of the conversation.
        rating:
          type: boolean
          description: |
            Set to `true` if the user liked the response, `false` if the user didn't like the response.
            No value if user didn't rate the response.
            Note that only messages with `role: "assistant"` can be rated.
        createdAt:
          type: integer
          description: |
            Unix timestamp for when the message was sent.
        references:
          type: array
          description: |
            List of references to external resources that are relevant
            to the message. For example, if the message is a response to
            a user's question about how to connect, the list of
            references could include links to the documentation, dev
            center articles, or a video lesson on MongoDB University.
          items:
            type: object
            required: [title, url]
            properties:
              title:
                type: string
                description: |
                  Title of the reference. This is what shows up in
                  rendered links. For example, "How to connect to
                  MongoDB Atlas".
              url:
                type: string
                format: uri
                description: |
                  URL to the reference. For example, "https://mongodb.com/docs/atlas/getting-started?tck=docs_chat".
    MessageRating:
      type: object
      properties:
        rating:
          type: boolean
    ErrorResponse:
      type: object
    OriginHeaderValue:
      type: string
      format: uri
      description: |
        The hostname of the page that the user is on when they start a
        conversation. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin.
  parameters:
    conversationId:
      name: conversationId
      required: true
      in: path
      schema:
        type: string
      description: The unique identifier for a conversation.
    messageId:
      name: messageId
      required: true
      in: path
      schema:
        type: string
      description: The unique identifier for a message.
