.. _quickstart-rust:

Quick Start for the MongoDB Rust Driver
=======================================

This quickstart guide provides instructions for setting up the MongoDB Rust driver, and performing basic CRUD operations using MongoDB Rust driver. By following this guide, you will learn how to connect to MongoDB using Rust and run basic queries.

Introduction
------------

The MongoDB Rust driver is a third-party driver created by the community, providing an efficient and easy-to-use interface for working with MongoDB from Rust.

In the rest of this guide, we will go through the following steps:

1. Install Rust and any necessary dependencies
2. Install the MongoDB Rust driver
3. Connect to a MongoDB instance
4. Insert, read, and delete data in a MongoDB collection

Setup
-----

Before we start, ensure that Rust is installed on your system. If Rust is not yet installed, go to https://www.rust-lang.org/tools/install to install Rust and its package manager, Cargo.

Next, create a new Rust project and add the MongoDB Rust driver as a dependency in your project's `Cargo.toml` file:

.. code-block:: toml
    :emphasize-lines: 2

    [dependencies]
    mongodb = "2.0"

If using Rust version 1.51 or below, additional dependencies may be required to compile the driver. Refer to driver documentation for more information.

Optional Atlas Setup
--------------------

If you don't have a MongoDB instance running, you can use the free tier of MongoDB Atlas to create a MongoDB instance in the cloud. Follow these steps to create an Atlas cluster:

1. Go to https://www.mongodb.com/cloud/atlas/signup and create an account
2. Create a new project
3. Click "Build a Cluster"
4. Follow the prompts to create your cluster
5. Click "Connect" to get your connection string

Replace the database, password, and collection name in the connection string with the correct values for your cluster.

Connect to MongoDB
------------------

To connect to MongoDB, use the `mongodb::Client` struct. 

.. code-block:: rust
    :emphasize-lines: 1

    use mongodb::{Client, options::ClientOptions};

    #[tokio::main]
    async fn main() -> Result<(), anyhow::Error> {
        let client_options = ClientOptions::parse("<MongoDB connection string>").await?;
        let client = Client::with_options(client_options)?;
    
        // Connection successful
        Ok(())
    }

Replace the `<MongoDB connection string>` with your connection string.

Insert, Read, and Delete Data
------------------------------

After connecting to MongoDB, you can perform CRUD (Create, Read, Update, Delete) operations.

For example, as shown here you can insert a document into a collection:

.. code-block:: rust
    :emphasize-lines: 1, 2

    use bson::{doc, Document};
    use mongodb::{Client, Collection};

    #[tokio::main]
    async fn main() -> Result<(), anyhow::Error> {
        let client = Client::with_uri_str("<MongoDB connection string>").await?;
        let db = client.database("mydb");
        let collection: Collection<Document> = db.collection("test");

        let result = collection.insert_one(doc!{ "name": "example" }, None).await?;
    
        // Insertion successful
        Ok(())
    }

Replace the `<MongoDB connection string>` with your connection string.

Next Steps
----------

You have learned how to setup the MongoDB Rust driver, and how to connect to a MongoDB instance and perform basic CRUD operations. For more advanced usage of the MongoDB Rust driver, refer to the driver's documentation.